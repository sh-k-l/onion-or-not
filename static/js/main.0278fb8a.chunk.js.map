{"version":3,"sources":["components/IntroScreen.js","components/LoadingScreen.js","components/Review.js","components/EndScreen.js","components/game/Choice.js","components/game/Round.js","components/game/Game.js","components/Start.js","serviceWorker.js","index.js"],"names":["IntroScreen","props","react_default","a","createElement","className","topScore","onClick","click","href","LoadingScreen","Review","rows","rounds","map","round","index","key","target","rel","true","url","title","false","EndScreen","cookies","Cookies","get","score","set","path","components_Review","Choice","text","Round","Math","random","components_game_Choice","answerHandler","data","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retrievePost","subreddit","fetch","concat","then","res","body","post","JSON","parse","children","generateRound","Promise","all","selected","newArr","toConsumableArray","state","push","setState","componentWillMount","handleAnswer","event","currentScore","innerHTML","endGame","restartHandler","baseState","src_components_EndScreen","components_game_Round","src_components_LoadingScreen","Component","Start","handleStart","renderIntroScreen","components_IntroScreen","components_game_Game","Boolean","window","location","hostname","match","ReactDOM","render","components_Start","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0278fb8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./IntroScreen.scss\";\r\n\r\nfunction IntroScreen(props){\r\n    \r\n    return(\r\n        <div className=\"intro-screen\">\r\n            <div className=\"intro-screen-content\">\r\n                <h2>Onion Or Not</h2>\r\n                <p>Your high score: {props.topScore}</p>\r\n                <button onClick={props.click}>GO!</button>\r\n                <div className=\"info\">\r\n                    <p>How to play:</p>\r\n                    <ul>\r\n                        <li>The game gets two random headlines, one from <a href=\"http://www.reddit.com/r/nottheonion\">/r/nottheonion</a> (real headlines) and one from <a href=\"www.reddit.com/r/theonion\">/r/theonion</a> (fake headlines).</li>\r\n                        <li>You need to click on the real headline (the post from <a href=\"http://www.reddit.com/r/nottheonion\">/r/nottheonion</a>).</li>\r\n                        <li>How many can you get in a row?</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IntroScreen;","import React from 'react';\r\nimport \"./LoadingScreen.scss\";\r\n\r\nconst LoadingScreen = () => (\r\n    <div className=\"loader-wrapper\">\r\n        <div className=\"loader\"></div>\r\n    </div>\r\n);\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\nimport \"./Review.scss\";\r\n\r\nfunction Review(props){\r\n\r\n    const rows = props.rounds.map((round, index) => {\r\n        return(\r\n            <tr key={index}>\r\n                <td><a target=\"_blank\" rel=\"noopener noreferrer\" href={round.true.url}>{round.true.title}</a></td>\r\n                <td><a target=\"_blank\" rel=\"noopener noreferrer\"  href={round.false.url}>{round.false.title}</a></td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return(\r\n        <div className=\"review\">\r\n            <table> \r\n                <thead>\r\n                    <tr>\r\n                        <th>/r/nottheonion <p>(real headline)</p></th>\r\n                        <th>/r/theonion <p>(false headline)</p></th>\r\n                    </tr>\r\n                </thead>          \r\n                <tbody>\r\n                    {rows}\r\n                </tbody> \r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Review;","import React from 'react';\r\nimport Cookies from 'universal-cookie';\r\nimport \"./EndScreen.scss\";\r\nimport Review from \"./Review\";\r\n\r\nconst EndScreen = (props) => {\r\n    const cookies = new Cookies();\r\n    let topScore = cookies.get(\"oonTopScore\") || 0;\r\n    if(topScore < props.score){\r\n        topScore = props.score;\r\n        cookies.set(\"oonTopScore\", topScore, { path: '/' });\r\n    }\r\n\r\n    return(\r\n        <div className=\"end-screen\">\r\n            {/* <div className=\"\"> */}\r\n              <div className=\"gg\">\r\n                <h2>GG!</h2>\r\n                <p>Your score: {props.score}</p>\r\n                <p>Your high score: {topScore}</p>\r\n                <button onClick={props.click}>Try again</button>\r\n              </div>\r\n            {/* </div> */}\r\n            <div className=\"review-wrapper\">\r\n                <Review rounds={props.rounds}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndScreen;","import React from 'react';\r\n\r\nimport \"./Choice.scss\";\r\n\r\nconst Choice = (props) => (\r\n    <div className=\"choice\">\r\n        <p onClick={props.click}>{props.text}</p>\r\n    </div>\r\n);\r\n\r\nexport default Choice;","import React from 'react';\r\nimport Choice from \"./Choice\";\r\n\r\nimport \"./Round.scss\";\r\n\r\nconst Round = (props) => {\r\n    if(Math.random() >= 0.5){\r\n        return(\r\n            <div className=\"round\">\r\n                <Choice click={props.answerHandler} text={props.data.true.title}/>            \r\n                <Choice click={props.answerHandler} text={props.data.false.title}/>            \r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className=\"round\">\r\n                <Choice click={props.answerHandler} text={props.data.false.title}/>            \r\n                <Choice click={props.answerHandler} text={props.data.true.title}/>                    \r\n            </div>\r\n        );\r\n    }  \r\n\r\n}\r\n\r\nexport default Round;","import React, {Component} from 'react';\r\n\r\nimport LoadingScreen from \"../LoadingScreen\";\r\nimport EndScreen from \"../EndScreen\";\r\nimport Round from \"./Round\";\r\n\r\nimport \"./Game.scss\";\r\n\r\n\r\n\r\nclass Game extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            endGame:false,\r\n            topScore:props.topScore,\r\n            currentScore:0,\r\n            rounds:[]\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n\r\n\r\n\r\n    retrievePost = (subreddit) => {\r\n        return fetch(`https://www.reddit.com/r/${subreddit}/random.json`)\r\n        .then(res => res.text())\r\n        .then(body => {\r\n            body = JSON.parse(body);\r\n            const post = {\r\n                title: body[0].data.children[0].data.title,\r\n                score: body[0].data.children[0].data.score,\r\n                url: body[0].data.children[0].data.url\r\n            }\r\n            if(post.score >= 5) return post;            \r\n            return this.retrievePost(subreddit);\r\n        });\r\n    }\r\n\r\n    generateRound = () => {\r\n        return Promise.all([\r\n            this.retrievePost(\"nottheonion\"),\r\n            this.retrievePost(\"theonion\")\r\n        ])\r\n        .then((res) => {\r\n            const round = {\r\n                true: res[0],\r\n                false: res[1],\r\n                selected: null\r\n            };\r\n            let newArr = [...this.state.rounds];\r\n            newArr.push(round);\r\n            this.setState({rounds: newArr});      \r\n        });\r\n    }\r\n\r\n    componentWillMount = () => this.generateRound();\r\n     \r\n\r\n    handleAnswer = (event) => {       \r\n        if(this.state.rounds[this.state.currentScore].true.title === event.target.innerHTML){\r\n                \r\n            this.setState({\r\n                currentScore: this.state.currentScore+1\r\n            });\r\n            this.generateRound();\r\n        }else{\r\n            this.setState({\r\n                endGame: true\r\n            });\r\n        }        \r\n    }\r\n\r\n    restartHandler = () => {\r\n        this.setState(this.baseState);\r\n        this.generateRound();\r\n    }\r\n\r\n    render(){\r\n        \r\n        // if(this.state.endGame) return (\r\n        //     <EndScreen \r\n        //         rounds={this.state.rounds} \r\n        //         topScore={this.props.topScore} \r\n        //         score={this.state.currentScore} \r\n        //         click={this.restartHandler}\r\n        //     />\r\n        // );\r\n\r\n        if(this.state.endGame) return (\r\n            <EndScreen \r\n                rounds={this.state.rounds} \r\n                topScore={this.props.topScore} \r\n                score={this.state.currentScore} \r\n                click={this.restartHandler}\r\n            />\r\n        );\r\n\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <p className=\"score\">Score: {this.state.currentScore}</p>\r\n                {!this.state.rounds[this.state.currentScore] ? \r\n                    <LoadingScreen/> : \r\n                    <Round \r\n                        answerHandler={this.handleAnswer} \r\n                        data={this.state.rounds[this.state.currentScore]}\r\n                    />}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React, {Component} from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport IntroScreen from \"./IntroScreen\";\r\nimport Game from \"./game/Game\";\r\n\r\n\r\nclass Start extends Component{\r\n    constructor(props){\r\n        const cookies = new Cookies();\r\n        super(props);\r\n        this.state = {\r\n            renderIntroScreen: true,\r\n            topScore: cookies.get(\"oonTopScore\") || 0\r\n        };\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.setState({renderIntroScreen: false});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.renderIntroScreen){\r\n            return <IntroScreen click={this.handleStart} topScore={this.state.topScore}/>;\r\n        }\r\n        return <Game topScore={this.state.topScore}/>;        \r\n    }\r\n\r\n}\r\n\r\nexport default Start;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Start from './components/Start';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Start/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}