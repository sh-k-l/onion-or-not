{"version":3,"sources":["components/IntroScreen.js","components/LoadingScreen.js","components/Review.js","components/EndScreen.js","components/game/Choice.js","components/game/Round.js","components/game/Game.js","components/Start.js","serviceWorker.js","index.js"],"names":["IntroScreen","props","react_default","a","createElement","className","topScore","onClick","click","href","LoadingScreen","Review","rows","rounds","map","round","index","key","target","rel","true","url","title","false","EndScreen","cookies","Cookies","get","body","class","score","set","path","components_Review","Choice","text","Round","Math","random","components_game_Choice","answerHandler","data","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retrievePost","subreddit","fetch","concat","then","res","post","JSON","parse","children","generateRound","Promise","all","selected","newArr","toConsumableArray","state","push","setState","componentWillMount","handleAnswer","event","currentScore","innerHTML","endGame","restartHandler","baseState","src_components_EndScreen","components_game_Round","src_components_LoadingScreen","Component","Start","handleStart","renderIntroScreen","components_IntroScreen","components_game_Game","Boolean","window","location","hostname","match","ReactDOM","render","components_Start","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7e3cc5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./IntroScreen.scss\";\r\n\r\nfunction IntroScreen(props){\r\n    \r\n    return(\r\n        <div className=\"intro-screen\">\r\n            <div className=\"intro-screen-content\">\r\n                <h2>Onion Or Not</h2>\r\n                <p>Your high score: {props.topScore}</p>\r\n                <button onClick={props.click}>GO!</button>\r\n                <div className=\"info\">\r\n                    <p>How to play:</p>\r\n                    <ul>\r\n                        <li>The game gets two random headlines, one from <a href=\"http://www.reddit.com/r/nottheonion\">/r/nottheonion</a> (real headlines) and one from <a href=\"www.reddit.com/r/theonion\">/r/theonion</a> (fake headlines).</li>\r\n                        <li>You need to click on the real headline (the post from <a href=\"http://www.reddit.com/r/nottheonion\">/r/nottheonion</a>).</li>\r\n                        <li>How many can you get in a row?</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IntroScreen;","import React from 'react';\r\nimport \"./LoadingScreen.scss\";\r\n\r\nconst LoadingScreen = () => (\r\n    <div className=\"loader-wrapper\">\r\n        <div className=\"loader\"></div>\r\n    </div>\r\n);\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\nimport \"./Review.scss\";\r\n\r\nfunction Review(props){\r\n\r\n    const rows = props.rounds.map((round, index) => {\r\n        return(\r\n            <tr key={index}>\r\n                <td><a target=\"_blank\" rel=\"noopener noreferrer\" href={round.true.url}>{round.true.title}</a></td>\r\n                <td><a target=\"_blank\" rel=\"noopener noreferrer\"  href={round.false.url}>{round.false.title}</a></td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return(\r\n        <div className=\"review\">\r\n            <table> \r\n                <thead>\r\n                    <tr>\r\n                        <th>/r/nottheonion <p>(real headline)</p></th>\r\n                        <th>/r/theonion <p>(false headline)</p></th>\r\n                    </tr>\r\n                </thead>          \r\n                <tbody>\r\n                    {rows}\r\n                </tbody> \r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Review;","import React from 'react';\r\nimport Cookies from 'universal-cookie';\r\nimport \"./EndScreen.scss\";\r\nimport Review from \"./Review\";\r\n\r\nconst EndScreen = (props) => {\r\n    const cookies = new Cookies();\r\n    let topScore = cookies.get(\"oonTopScore\") || 0;\r\n\r\n    let body = [\r\n        <p class=\"score\">Your score: {props.score}</p>,\r\n        <p>Your high score: {topScore}</p>\r\n    ];\r\n\r\n    if(topScore < props.score){\r\n        topScore = props.score;\r\n        cookies.set(\"oonTopScore\", topScore, { path: '/' });\r\n        body = [\r\n            <p>NEW HIGH SCORE</p>,\r\n            <p className=\"high-score\">You scored: {props.score}!</p>            \r\n        ]\r\n    }\r\n\r\n    return(\r\n        <div className=\"end-screen\">\r\n\r\n            <div className=\"gg\">\r\n            <h2>GG!</h2>\r\n            {body}\r\n            <button onClick={props.click}>Try again</button>\r\n            </div>\r\n\r\n            <div className=\"review-wrapper\">\r\n                <Review rounds={props.rounds}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndScreen;","import React from 'react';\r\n\r\nimport \"./Choice.scss\";\r\n\r\nconst Choice = (props) => (\r\n    <div className=\"choice\">\r\n        <p onClick={props.click}>{props.text}</p>\r\n    </div>\r\n);\r\n\r\nexport default Choice;","import React from 'react';\r\nimport Choice from \"./Choice\";\r\n\r\nimport \"./Round.scss\";\r\n\r\nconst Round = (props) => {\r\n    if(Math.random() >= 0.5){\r\n        return(\r\n            <div className=\"round\">\r\n                <Choice click={props.answerHandler} text={props.data.true.title}/>            \r\n                <Choice click={props.answerHandler} text={props.data.false.title}/>            \r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className=\"round\">\r\n                <Choice click={props.answerHandler} text={props.data.false.title}/>            \r\n                <Choice click={props.answerHandler} text={props.data.true.title}/>                    \r\n            </div>\r\n        );\r\n    }  \r\n\r\n}\r\n\r\nexport default Round;","import React, {Component} from 'react';\r\n\r\nimport LoadingScreen from \"../LoadingScreen\";\r\nimport EndScreen from \"../EndScreen\";\r\nimport Round from \"./Round\";\r\n\r\nimport \"./Game.scss\";\r\n\r\n\r\n\r\nclass Game extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            endGame:false,\r\n            topScore:props.topScore,\r\n            currentScore:0,\r\n            rounds:[]\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n\r\n\r\n\r\n    retrievePost = (subreddit) => {\r\n        return fetch(`https://www.reddit.com/r/${subreddit}/random.json`)\r\n        .then(res => res.text())\r\n        .then(body => {\r\n            body = JSON.parse(body);\r\n            const post = {\r\n                title: body[0].data.children[0].data.title,\r\n                score: body[0].data.children[0].data.score,\r\n                url: body[0].data.children[0].data.url\r\n            }\r\n            if(post.score >= 5) return post;            \r\n            return this.retrievePost(subreddit);\r\n        });\r\n    }\r\n\r\n    generateRound = () => {\r\n        return Promise.all([\r\n            this.retrievePost(\"nottheonion\"),\r\n            this.retrievePost(\"theonion\")\r\n        ])\r\n        .then((res) => {\r\n            const round = {\r\n                true: res[0],\r\n                false: res[1],\r\n                selected: null\r\n            };\r\n            let newArr = [...this.state.rounds];\r\n            newArr.push(round);\r\n            this.setState({rounds: newArr});      \r\n        });\r\n    }\r\n\r\n    componentWillMount = () => this.generateRound();\r\n     \r\n\r\n    handleAnswer = (event) => {       \r\n        if(this.state.rounds[this.state.currentScore].true.title === event.target.innerHTML){\r\n                \r\n            this.setState({\r\n                currentScore: this.state.currentScore+1\r\n            });\r\n            this.generateRound();\r\n        }else{\r\n            this.setState({\r\n                endGame: true\r\n            });\r\n        }        \r\n    }\r\n\r\n    restartHandler = () => {\r\n        this.setState(this.baseState);\r\n        this.generateRound();\r\n    }\r\n\r\n    render(){\r\n        \r\n        // if(this.state.endGame) return (\r\n        //     <EndScreen \r\n        //         rounds={this.state.rounds} \r\n        //         topScore={this.props.topScore} \r\n        //         score={this.state.currentScore} \r\n        //         click={this.restartHandler}\r\n        //     />\r\n        // );\r\n\r\n        if(this.state.endGame) return (\r\n            <EndScreen \r\n                rounds={this.state.rounds} \r\n                topScore={this.props.topScore} \r\n                score={this.state.currentScore} \r\n                click={this.restartHandler}\r\n            />\r\n        );\r\n\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <p className=\"score\">Score: {this.state.currentScore}</p>\r\n                {!this.state.rounds[this.state.currentScore] ? \r\n                    <LoadingScreen/> : \r\n                    <Round \r\n                        answerHandler={this.handleAnswer} \r\n                        data={this.state.rounds[this.state.currentScore]}\r\n                    />}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React, {Component} from 'react';\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport IntroScreen from \"./IntroScreen\";\r\nimport Game from \"./game/Game\";\r\n\r\n\r\nclass Start extends Component{\r\n    constructor(props){\r\n        const cookies = new Cookies();\r\n        super(props);\r\n        this.state = {\r\n            renderIntroScreen: true,\r\n            topScore: cookies.get(\"oonTopScore\") || 0\r\n        };\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.setState({renderIntroScreen: false});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.renderIntroScreen){\r\n            return <IntroScreen click={this.handleStart} topScore={this.state.topScore}/>;\r\n        }\r\n        return <Game topScore={this.state.topScore}/>;        \r\n    }\r\n\r\n}\r\n\r\nexport default Start;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Start from './components/Start';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Start/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}